// servidor.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define BUFFER_SIZE 256
#define PORT 5500

void to_uppercase(char *str) {
    while (*str) {
        *str = toupper((unsigned char) *str);
        str++;
    }
}

void *handle_client(void *socket_cliente_ptr) {
    int socket_cliente = *(int *)socket_cliente_ptr;
    free(socket_cliente_ptr);

    char buffer[BUFFER_SIZE];

    // Recibir mensaje del router
    read(socket_cliente, buffer, BUFFER_SIZE);

    // Procesar mensaje (convertir a mayúsculas)
    to_uppercase(buffer);

    // Enviar mensaje procesado de vuelta al router
    write(socket_cliente, buffer, strlen(buffer));

    close(socket_cliente);
    pthread_exit(NULL);
}

int main() {
    int socket_servidor, *socket_cliente_ptr;
    struct sockaddr_in dir_servidor, dir_cliente;
    socklen_t tam_dir_cliente = sizeof(dir_cliente);

    socket_servidor = socket(AF_INET, SOCK_STREAM, 0);
    if (socket_servidor < 0) {
        perror("Error al crear el socket del servidor");
        exit(EXIT_FAILURE);
    }

    memset(&dir_servidor, 0, sizeof(dir_servidor));
    dir_servidor.sin_family = AF_INET;
    dir_servidor.sin_addr.s_addr = htonl(INADDR_ANY);
    dir_servidor.sin_port = htons(PORT);

    if (bind(socket_servidor, (struct sockaddr *)&dir_servidor, sizeof(dir_servidor)) < 0) {
        perror("Error al vincular el socket del servidor");
        close(socket_servidor);
        exit(EXIT_FAILURE);
    }

    listen(socket_servidor, 5);

    while (1) {
        socket_cliente_ptr = malloc(sizeof(int));
        *socket_cliente_ptr = accept(socket_servidor, (struct sockaddr *)&dir_cliente, &tam_dir_cliente);
        if (*socket_cliente_ptr < 0) {
            perror("Error al aceptar la conexión del router");
            free(socket_cliente_ptr);
            continue;
        }

        pthread_t thread_id;
        if (pthread_create(&thread_id, NULL, handle_client, socket_cliente_ptr) != 0) {
            perror("Error al crear el hilo para el router");
            close(*socket_cliente_ptr);
            free(socket_cliente_ptr);
        }
    }

    close(socket_servidor);
    return 0;
}